70. Climbing Stairs

class Solution {
public:
    int climbStairs(int n) {
        vector<int>dp(n+1 , 0);
        dp[0] = 1;
        dp[1] = 1;
        
    for(int i=2 ; i<=n ; i++){
         dp[i] = dp[i-1] + dp[i-2];
     }
     return dp[n];
    }
};

---------------------------------------------------------
322. Coin Change

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0  
        
        for coin in coins:
            for i in range(coin, amount + 1):
                dp[i] = min(dp[i], dp[i - coin] + 1)
        
        return dp[amount] if dp[amount] != float('inf') else -1
---------------------------------------------------------------------

1143. Longest Common Subsequence

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return dp[m][n]
---------------------------------------------------------------------

88. Merge Sorted Array

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int p1 = m-1;
        int p2 = n-1;
        int p = (m+n)-1;

        while(p1>= 0 && p2>= 0){
            if(nums1[p1] > nums2[p2]){
                nums1[p]  = nums1[p1];
                p1--;
             }
             else{
                nums1[p] = nums2[p2];
                p2--;
            
             }
             p--;
        }

        while(p2>=0){
            nums1[p] = nums2[p2];
            p--;
            p2--;
        }
    }
};
-----------------------------------------------------------------------

179. Largest Number

class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        nums = list(map(str, nums))
        
        nums.sort(key=lambda x: x*10, reverse=True)  
        
        if nums[0] == '0':
            return '0'
        
        return ''.join(nums)

-------------------------------------------------------------------------
75. Sort Colors

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int low = 0 , mid = 0 , high = n-1;
      while(mid <= high){
            if(nums[mid] == 0){
                swap(nums[low] , nums[mid]);
                low++;
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;

            }
            else{
                swap(nums[mid] , nums[high]);
                high--;

            }
        }

    }
};


--------------------------------------------------------------------------
169. Majority Element

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> countMap;
        int n = nums.size();

        for (int num : nums){
            countMap[num]++;

            if(countMap[num] > n/2){
                return num;
            }
        }
        return -1;
    }
};

-------------------------------------------------------------------------
206. Reverse Linked List

class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev = None
        curr = head

        while curr:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node

        return prev

-------------------------------------------------------

133. Clone Graph

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return None

        visited = {}

        def dfs(curr):
            if curr in visited:
                return visited[curr]

            clone = Node(curr.val, [])
            visited[curr] = clone

            for neighbor in curr.neighbors:
                clone.neighbors.append(dfs(neighbor))

            return clone

        return dfs(node)

---------------------------------------------------------
104. Maximum Depth of Binary Tree

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))

----------------------------------------------------------------------------

100. Same Tree

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (!p && !q) return true;  // Both nodes are null
        if (!p || !q) return false; // One node is null, the other isn't
        if (p->val != q->val) return false; // Node values differ
        // Recursively check left and right subtrees
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};
------------------------------------------------------------------------------

101. Symmetric Tree


class Solution {
public:
    bool isMirror(TreeNode* t1, TreeNode* t2) {
        if (!t1 && !t2) return true;  // Both are null
        if (!t1 || !t2) return false; // One is null, the other isn't
        return (t1->val == t2->val) &&
               isMirror(t1->left, t2->right) &&
               isMirror(t1->right, t2->left);
    }

    bool isSymmetric(TreeNode* root) {
        if (!root) return true; // Empty tree is symmetric
        return isMirror(root->left, root->right);
    }
};
---------------------------------------------------------

226. Invert Binary Tree

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root == NULL){
            return root;
        }
         
        TreeNode* left = invertTree(root->left);
        TreeNode* right = invertTree(root->right);
       
        root->left = right;
        root->right = left;
        
        return root;
    }
};




